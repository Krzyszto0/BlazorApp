@page "/"
@using BlazorApp2.Data
@using Syncfusion.Blazor.Charts

@implements IDisposable
@inject IJSRuntime JSRuntime

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<WalletService>

<PageTitle>Home</PageTitle>
<section class="hero is-success is-fullheight">
    <!-- Hero head: will stick at the top -->
    <div class="hero-head">
        <header class="navbar">
            <div class="container is-fluid">
                <div class="navbar-brand">
                    <AuthorizeView>
                        <Authorized>
                            <div class="navbar-item">
                                <NavLink class="nav-link" href="Account/Manage">
                                    <button class="button">
                                    @context.User.Identity?.Name
                                    </button>
                                </NavLink>
                            </div>
                            <div class="navbar-item">
                                <form action="Account/Logout" method="post">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                    <button class="button">
                                        Logout
                                    </button>
                                </form>
                            </div>
                        </Authorized>
                        <NotAuthorized>
                            <div class="navbar-item">
                                <NavLink class="nav-link" href="Account/Register">
                                    <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                                </NavLink>
                            </div>
                            <div class="navbar-item">
                                <NavLink class="nav-link" href="Account/Login">
                                    <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                                </NavLink>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>
                    <a class="navbar-item has-text-centered" href="">
                        <span class="title has-text-centered">WebWallet</span>
                    </a>
                </div>
                <div id="navbarMenuHeroC" class="navbar-menu">
                    <div class="navbar-end">
                        <a class="navbar-item" href="CashFlow">
                            Przepływ pieniędzy
                        </a>
                        <span class="navbar-item">
                            <button class="button is-success is-inverted" @onclick="(()=> {addincome.show();})">
                                <span class="icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path fill="#24d160" d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM232 344V280H168c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z" /></svg>
                                </span>
                                <span>Dodaj Przychód</span>
                            </button>
                            <AddIncome @ref="addincome"></AddIncome>
                        </span>

                        <span class="navbar-item">
                            <button class="button is-success is-inverted" @onclick="(()=> {addoutcome.show();})">
                                <span class="icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path fill="#24d160" d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM232 344V280H168c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z" /></svg>
                                </span>
                                <span>Dodaj Wydatek</span>
                            </button>
                            <AddOutcome @ref="addoutcome"></AddOutcome>
                        </span>
                    </div>
                </div>
            </div>
        </header>
    </div>

    <!-- Hero content: will be in the middle -->
    <div class="hero-body tile is-ancestor">
        <div class="tile is-3 is-vertical is-parent">
            @if(Accounts == null)
            {
                <div class="spinner"></div>
            }else{
            @foreach(var Account in Accounts){
                <button class="button is-primary is-inverted is-rounded btn" @onclick="(() => {account.UpdateAccount(Account);})"> @Account.AccountName</button>
            }
            }
            <button class="button is-primary is-inverted is-rounded btn" @onclick="(()=> {account.show();})">
                <span class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path fill="#24d160" d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM232 344V280H168c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z" /></svg>
                </span>
                <span>Add Account</span>
            </button>
            <AddAccount @ref="account"></AddAccount>
        </div>

        <div class="tile is-4 is-vertical is-parent">
            <div class="tile is-child box">
                <h1 class="Title">Przepływ pieniędzy 
                    <span class="tag is-rounded is-large" style="margin-left: 70px">@Math.Round(CashFlows.Sum(cf => cf.CashFlow),2) PLN</span>
                </h1>   
                <!-- Tu będzie wykres -->

                <SfChart Width="500px" Height="300px">
                    <ChartPrimaryXAxis IntervalType="IntervalType.Months" LabelFormat="MMM" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
                    </ChartPrimaryXAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@CashFlows" XName="Month" YName="CashFlow" Type="ChartSeriesType.Line">
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>

            </div>
            <div class="tile is-child box">
                @if (CashFlows.Sum(cf => cf.Outcome) < CashFlows.Sum(cf => cf.Income))
                {
                    <h1 class="Title">Przychód 
                    <span class="tag is-rounded is-large" style="margin-left: 210px">@Math.Round(CashFlows.Sum(cf => cf.Income), 2) PLN</span>
                    </h1>
                    <progress class="progress is-primary" value="@Math.Round(CashFlows.Sum(cf => cf.Income), 0)" max="@Math.Round(CashFlows.Sum(cf => cf.Income), 0)">15%</progress>
                    <h1 class="Title">Wydatki 
                        <span class="tag is-rounded is-large" style="margin-left: 240px">@Math.Round(CashFlows.Sum(cf => cf.Outcome), 2) PLN</span>
                    </h1>
                    <progress class="progress is-danger" value="@Math.Round(Math.Abs(CashFlows.Sum(cf => cf.Outcome)), 0)" max="@Math.Round(CashFlows.Sum(cf => cf.Income), 0)">15%</progress>
                }
                else
                {
                    <h1 class="Title">
                        Przychód
                        <span class="tag is-rounded is-large" style="margin-left: 210px">@Math.Round(CashFlows.Sum(cf => cf.Income), 2) PLN</span>
                    </h1>
                    <progress class="progress is-primary" value="@Math.Round(CashFlows.Sum(cf => cf.Income), 0)" max="@Math.Round(Math.Abs(CashFlows.Sum(cf => cf.Outcome)), 0)">15%</progress>
                    <h1 class="Title">
                        Wydatki
                        <span class="tag is-rounded is-large" style="margin-left: 240px">@Math.Round(CashFlows.Sum(cf => cf.Outcome), 2) PLN</span>
                    </h1>
                    <progress class="progress is-danger" value="@Math.Round(Math.Abs(CashFlows.Sum(cf => cf.Outcome)), 0)" max="@Math.Round(Math.Abs(CashFlows.Sum(cf => cf.Outcome)), 0)">15%</progress>
                }
            </div>
        </div>

        <div class="tile is-parent">
            <div class="tile is-child box">
                <h1 class="Title has-text-centered">Wpisy</h1>
            @if(Incomes == null)
            {
                <p class="title">Nothings here</p>
            }
            else
            {
                <table class="table is-fullwidth">
                    <thead class="is-primary">
                        <tr>
                            <th><svg xmlns="http://www.w3.org/2000/svg" height="16" width="14" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z"/></svg></th>
                            <td>Nazwa Konta</td>
                            <td>Kwota</td>
                        </tr>
                    </thead>
                    <tbody>
                            @foreach (var transaction in Transactions.Take(10))
                            {
                                @if (transaction.Amount > 0)
                                {
                                    <tr>
                                        <td>
                                            <svg xmlns="http://www.w3.org/2000/svg" height="16" width="18" viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M384 160c-17.7 0-32-14.3-32-32s14.3-32 32-32H544c17.7 0 32 14.3 32 32V288c0 17.7-14.3 32-32 32s-32-14.3-32-32V205.3L342.6 374.6c-12.5 12.5-32.8 12.5-45.3 0L192 269.3 54.6 406.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160c12.5-12.5 32.8-12.5 45.3 0L320 306.7 466.7 160H384z" /></svg>
                                        </td>
                                        <td class="has-text-success">@transaction.AccountName</td>
                                        <td class="has-text-success">@transaction.Amount</td>
                                        <td class="has-text-success">@transaction.Date</td>
                                        <td>
                                            @if (Incomes.Any(i => i.Id == transaction.Id))
                                            {
                                                <button class="button is-success" @onclick="(() => { addincome.EditIncome(Incomes.First(i => i.Id == transaction.Id)); })">Edit</button>
                                            }
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td>
                                            <svg xmlns="http://www.w3.org/2000/svg" height="16" width="18" viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M384 352c-17.7 0-32 14.3-32 32s14.3 32 32 32H544c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32s-32 14.3-32 32v82.7L342.6 137.4c-12.5-12.5-32.8-12.5-45.3 0L192 242.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0L320 205.3 466.7 352H384z" /></svg>
                                        </td>
                                        <td class="has-text-danger">@transaction.AccountName</td>
                                        <td class="has-text-danger">@transaction.Amount</td>
                                        <td class="has-text-danger">@transaction.Date</td>
                                        <td>
                                            @if (Outcomes.Any(i => i.Id == transaction.Id))
                                            {
                                                <button class="button is-danger" @onclick="(() => { addoutcome.EditOutcome(Outcomes.First(i => i.Id == transaction.Id)); })">Edit</button>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                    </tbody>
                </table>
            }
            </div>
        </div>
    </div>
</section>

@code {
    private AddIncome addincome;
    private AddOutcome addoutcome;
    private AddAccount account;

    public List<Account> Accounts;
    public List<Income> Incomes;
    public List<Outcome> Outcomes;
    public List<Transaction> Transactions = new List<Transaction>();
    public List<Cashflow> CashFlows = new List<Cashflow>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        Accounts = await Service.GetAccountsAsync(user.Identity.Name);
        Incomes = await Service.GetIncomesAsync(user.Identity.Name);
        Outcomes = await Service.GetOutcomesAsync(user.Identity.Name);

        var combinedTransactions = Incomes.Select(income => new Transaction
            {
                Id = income.Id,
                AccountName = income.AccountName.AccountName,
                Amount = income.Amount,
                Date = income.Data
            }).Concat(Outcomes.Select(outcome => new Transaction
            {
                Id = outcome.Id,
                AccountName = outcome.AccountName.AccountName,
                Amount = outcome.Amount,
                Date = outcome.Data
            }));

        Transactions = combinedTransactions.OrderByDescending(t => t.Date).ToList();

        CashFlows =  Service.GetCashflows(user.Identity.Name);
    }


}
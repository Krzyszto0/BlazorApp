@using BlazorApp2.Components.Account.Pages
@using BlazorApp2.Data
@using BlazorApp2.Components.Pages

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inherits OwningComponentBase<WalletService>

<AuthorizeView>
    <Authorized>
        @if (display)
        {
            @if(Accounts == null)
            {
                <div class="spinner"></div>
            }else{
            <div class="modal is-active">
                <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                @if (objincome.Id > 0)
                {
                    <p class="modal-card-title">Edytuj Przychód</p>
                }else
                {
                    <p class="modal-card-title">Dodaj Przychód</p>
                }
                    <button class="delete" aria-label="close" @onclick="close"></button>
                </header>
                <section class="modal-card-body">
                    <div class="box">
                        <p class="is-info">Konto</p>
                            <div class="field">
                                <div class="control">
                                    <div class="select is-primary">
                                        <select @bind="objincome.AccountId">
                                            @foreach (var Account in Accounts)
                                            {
                                                <option value="@Account.Id">
                                                @Account.AccountName
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                @if (NoAccount)
                                {
                                    <span class="has-text-danger">Wybierz Bank</span>
                                }
                            </div>    
                        <p class="is-info">Przychód</p>
                                <input class="input is-medium is-primary" type="number" step="0.01" placeholder="Wprowadź Przychód" @bind="objincome.Amount">
                        @if (NoAmount)
                        {
                            <span class="has-text-danger">Podaj kwotę</span>
                        }
                        <p class="is-info">Data</p>
                        <input type="date" class="input is-primary" @bind="objincome.Data"/>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-success" @onclick="SaveIncome">Dodaj Przychód</button>
                    <button class="button" @onclick="close">Cancel</button>
                    @if (objincome.Id > 0)
                    {
                        <button class="button is-danger" @onclick="DeleteIncome">Delete</button>
                    }
                </footer>
            </div>
        </div>
        }
        }
    </Authorized>
    <NotAuthorized>
        @if (display)
        {
            <div class="modal is-active">
                <div class="modal-background"></div>
                <div class="modal-card">
                    <header class="modal-card-head">
                        <p class="modal-card-title">Dodaj Wpis</p>
                        <button class="delete" aria-label="close" @onclick="close"></button>
                    </header>
                    <section class="modal-card-body">
                        <div class="box">
                            <div class="columns">
                                <div class="column">
                            <NavLink href="Account/Login">
                            <h1 class="button is-success">Zaloguj się</h1>
                            </NavLink>
                                </div>
                                <div class="column">
                            <NavLink href="Account/Register">
                            <h1 class="button is-success">Zarejestruj się</h1>
                            </NavLink>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private Home home;
    private bool display;
    private bool NoAccount;
    private bool NoAmount;
    string AccountForm;

    Income objincome = new Income();

    [Parameter]
    public EventCallback SavedIncome { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    public List<Income> Incomes;
    public List<Account> Accounts;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        Incomes = await Service.GetIncomesAsync(user.Identity.Name);
        Accounts = await Service.GetAccountsAsync(user.Identity.Name);
    }

    public void show()
    {
        objincome = new Income();
        objincome.Data = DateTime.Today;
        objincome.Id = 0;

        this.display = true;
        StateHasChanged();
    }

    public void close()
    {
        this.display = false;
        StateHasChanged();
    }

    async Task SaveIncome()
    {
        if (objincome.AccountId != 0)
        {
            if (objincome.Amount > 0 || objincome.Amount < 0)
            {
                this.NoAccount = false;
                this.NoAmount = false;
                this.display = false;
                var user = (await authenticationStateTask).User;
                if (objincome.Id == 0)
                {
                    Income objNewincome = new Income();
                    objNewincome.Data = objincome.Data;
                    objNewincome.AccountId = objincome.AccountId;
                    if (objincome.Amount > 0)
                    {
                        objNewincome.Amount = objincome.Amount;
                    }
                    else
                    {
                        objNewincome.Amount = -objincome.Amount;
                    }
                    objNewincome.UserName = user.Identity.Name;
                    var result = Service.CreateIncomeAsync(objNewincome);
                    StateHasChanged();
                }
                else
                {
                    objincome.AccountId = objincome.AccountId;
                    var result = Service.UpdateIncomeAsync(objincome);
                }
                await SavedIncome.InvokeAsync();
            }
            else
            {
                this.NoAmount = true;
                StateHasChanged();
            }
        }
        else
        {
            this.NoAccount = true;
            StateHasChanged();
        }
    }

    public async Task EditIncome(Income income)
    {
        objincome = income;
        this.display = true;
        await SavedIncome.InvokeAsync();
        StateHasChanged();
    }

    public async Task DeleteIncome()
    {
        this.display = false;
        var user = (await authenticationStateTask).User;
        var result = Service.DeleteIncomeAsync(objincome);
        Incomes = await Service.GetIncomesAsync(user.Identity.Name);
        await SavedIncome.InvokeAsync();
        StateHasChanged();
    }
}
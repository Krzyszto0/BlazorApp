@using BlazorApp2.Components.Account.Pages
@using BlazorApp2.Data.Incomes
@using BlazorApp2.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<IncomeService>

<AuthorizeView>
    <Authorized>
        @if (display)
        {
            <div class="modal is-active">
                <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="modal-card-title">Dodaj Wpis</p>
                    <button class="delete" aria-label="close" @onclick="close"></button>
                </header>
                <section class="modal-card-body">
                    <div class="box">
                        <p class="is-info">Konto</p>
                        <input class="input is-medium is-primary" type="text" placeholder="Wprowadź Konto" @bind="objincome.Account">
                        <p class="is-info">Wartość</p>
                        <input class="input is-medium is-primary" type="number" placeholder="Wprowadź Wartość" @bind="objincome.Amount">
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-success" @onclick="SaveIncome">Dodaj Przychód</button>
                    <button class="button" @onclick="close">Cancel</button>
                        @if (objincome.Id > 0)
                        {
                            <button class="button is-danger" @onclick="Delete">Delete</button>
                        }
                </footer>
            </div>
        </div>
        }
    </Authorized>
    <NotAuthorized>
        @if (display)
        {
            <div class="modal is-active">
                <div class="modal-background"></div>
                <div class="modal-card">
                    <header class="modal-card-head">
                        <p class="modal-card-title">Dodaj Wpis</p>
                        <button class="delete" aria-label="close" @onclick="close"></button>
                    </header>
                    <section class="modal-card-body">
                        <div class="box">
                            <div class="columns">
                                <div class="column">
                            <NavLink href="Account/Login">
                            <h1 class="button is-success">Zaloguj się</h1>
                            </NavLink>
                                </div>
                                <div class="column">
                            <NavLink href="Account/Register">
                            <h1 class="button is-success">Zarejestruj się</h1>
                            </NavLink>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>



@code {
    private bool display;

    Income objincome = new Income();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    public List<Income> Incomes;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        Incomes = await Service.GetIncomesAsync(user.Identity.Name);
    }

    public void show()
    {
        objincome = new Income();
        objincome.Id = 0;

        this.display = true;
        StateHasChanged();
    }

    public void close()
    {
        this.display = false;
        StateHasChanged();
    }

    async Task SaveIncome()
    {
        this.display = false;
        var user = (await authenticationStateTask).User;
        if(objincome.Id == 0)
        {
            Income objNewincome = new Income();
            objNewincome.Data = System.DateTime.Now;
            objNewincome.Account = objincome.Account;
            objNewincome.Amount = objincome.Amount;
            objNewincome.UserName = user.Identity.Name;
            var result = Service.CreateIncomeAsync(objNewincome);
            StateHasChanged();
        }
        else
        {
            var result = Service.UpdateIncomeAsync(objincome);
        }
        Incomes = await Service.GetIncomesAsync(user.Identity.Name);
        StateHasChanged();
    }

    public void Edit(Income income)
    {
        objincome = income;
        this.display = true;
        StateHasChanged();
    }

    public async Task Delete()
    {
        this.display = false;
        var user = (await authenticationStateTask).User;
        var result = Service.DeleteIncomeAsync(objincome);
        Incomes = await Service.GetIncomesAsync(user.Identity.Name);
        StateHasChanged();
    }


}